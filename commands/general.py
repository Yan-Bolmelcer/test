import random
from telegram import Update
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardMarkup, KeyboardButton

from core.ai import recognize_intent
from core.utils import send_typing_action
from core.security import security_checks

from commands.docs import help_keyboard
from commands.docs import (
    birthday,
    personnelData,
    vacationLeftovers,
    taxCertificate,
    billingStatement,
    vacationWithoutPay,
    getFile,
    checklist,
    feedbackRequest,
)

intent_map = {
    "birthday": birthday,
    "personnel": personnelData,
    "vacation_leftovers": vacationLeftovers,
    "tax_certificate": taxCertificate,
    "billing_statement": billingStatement,
    "vacation_without_pay": vacationWithoutPay,
    "file": getFile,
    "checklist": checklist,
}

WELCOME_MESSAGES = [
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ: —Å–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—É—Å–∫, —Ä–∞—Å—á—ë—Ç–Ω–∏–∫ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ üòä",
    "üìÑ –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —Å–ø—Ä–∞–≤–∫—É, —Ä–∞—Å—á—ë—Ç–Ω—ã–π –ª–∏—Å—Ç –∏–ª–∏ –≤ –æ—Ç–ø—É—Å–∫? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –∏ —è –ø–æ–º–æ–≥—É.",
    "üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –∫–∞–¥—Ä–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "‚úâÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ–±–µ –Ω—É–∂–Ω–∞ ‚Äî —è –≤—Å—ë –æ—Ä–≥–∞–Ω–∏–∑—É—é.",
]


@security_checks
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    intent = recognize_intent(user_text)

    if not intent:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ.",
            reply_markup=await help_keyboard(),
        )
        return

    func = intent_map.get(intent)
    if func:
        await func(update, context)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ò–Ω—Ç–µ–Ω—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
        )


@security_checks
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(context, update.effective_chat.id)
    msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(random.choice(WELCOME_MESSAGES)),
    )
    context.user_data["start_msg_id"] = msg.message_id


@security_checks
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(context, update.effective_chat.id)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            "ü§ñ *–ê–†–ë–ò–° –ë–æ—Ç*"
            "–Ø —É–º–µ—é:"
            "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"
            "- –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            "- –ü–æ–º–æ–≥–∞—Ç—å —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏"
        ),
        parse_mode="Markdown",
    )


@security_checks
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    previous = context.user_data.get("next_step_msg")
    if previous:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id, message_id=previous
            )
        except Exception:
            pass
    msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=await help_keyboard(),
    )
    context.user_data["next_step_msg"] = msg.message_id
