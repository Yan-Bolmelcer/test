import logging
import re
from datetime import datetime, timedelta
from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

# –î–æ–ø—É—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
AUTHORIZED_USERS = []  # –î–æ–±–∞–≤—å Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–∫)
RATE_LIMIT_SECONDS = 3


def is_authorized(user_id: int) -> bool:
    return not AUTHORIZED_USERS or user_id in AUTHORIZED_USERS


def security_checks(func):
    @wraps(func)
    async def wrapper(
        update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs
    ):
        user_id = update.effective_user.id
        user_text = update.message.text if update.message else ""

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not is_authorized(user_id):
            logger.warning(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.",
            )
            return

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
        now = datetime.now()
        last_call = context.user_data.get("last_call")
        if last_call and (now - last_call) < timedelta(seconds=RATE_LIMIT_SECONDS):
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π.",
            )
            return
        context.user_data["last_call"] = now

        # 3. –°–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
        if user_text:
            if len(user_text) > 200:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.",
                )
                return
            if re.search(
                r"(select|insert|<script|drop\s+table)", user_text, re.IGNORECASE
            ):
                logger.warning(f"üõë –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ –æ—Ç {user_id}: {user_text}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.",
                )
                return

        return await func(update, context, *args, **kwargs)

    return wrapper
