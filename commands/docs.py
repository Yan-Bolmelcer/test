import datetime
import pytz
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import send_typing_action, star
from core.network import fetch_json_get, fetch_json_post, fetch_and_send_file

LEARN = "–†–∞–±–æ—Ç–∞–°–æ–°—Ç–∞–∂–µ—Ä–∞–º–∏"
EXIT = "Exit–ò–Ω—Ç–µ—Ä–≤—å—é"
INTERVIEW = "–ò—Ç–æ–≥–∏–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"
FEEDBACK = "Feedback"
BASE_URL = "https://dev1.arbis29.ru/ZUP_demo/hs/dataForBot"


async def birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await fetch_json_get(
        f"{BASE_URL}/employeeBirthdays",
        {},
        update,
        context,
        "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è",
    )


async def personnelData(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await fetch_json_get(
        f"{BASE_URL}/personnelData",
        {"EmployeeId": update.effective_chat.id},
        update,
        context,
        "–ù–µ—Ç –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    )


async def vacationLeftovers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = datetime.datetime.now(pytz.timezone("Europe/Moscow")).isoformat()
    await fetch_json_get(
        f"{BASE_URL}/vacationLeftovers",
        {"EmployeeId": update.effective_chat.id, "Date": date},
        update,
        context,
        "–û—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
    )


async def taxCertificate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await fetch_json_post(
        f"{BASE_URL}/personalIncomeTaxCertificate",
        {
            "EmployeeId": str(update.effective_chat.id),
            "StartDate": "2022-01-01T00:00:00+03:00",
            "EndDate": "2022-12-31T23:59:59+03:00",
        },
        update,
        context,
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø—Ä–∞–≤–∫—É 2-–ù–î–§–õ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
    )


async def vacationWithoutPay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await fetch_json_post(
        f"{BASE_URL}/vacationWithoutPay",
        {
            "EmployeeId": str(update.effective_chat.id),
            "StartDate": "2022-01-01T00:00:00+03:00",
            "EndDate": "2022-12-31T23:59:59+03:00",
        },
        update,
        context,
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
    )


async def getFile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /file –§–∞–π–ª–§–ê–ö",
        )
        return
    file_type = " ".join(context.args)
    await fetch_and_send_file(f"{BASE_URL}/file", file_type, update, context)


async def billingStatement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = "2018-03-04T16:11:09.466126+03:00"
    await fetch_and_send_file(
        f"{BASE_URL}/billingStatement", f"BillingStatement_{date}", update, context
    )


async def checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("Exit –ò–Ω—Ç–µ—Ä–≤—å—é", callback_data=EXIT),
            InlineKeyboardButton("–ò—Ç–æ–≥–∏ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è", callback_data=INTERVIEW),
            InlineKeyboardButton("–†–∞–±–æ—Ç–∞ –°–æ –°—Ç–∞–∂–µ—Ä–∞–º–∏", callback_data=LEARN),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup,
    )


async def checklistRequest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await fetch_json_get(
        f"{BASE_URL}/checklist",
        {"TypeOfChecklist": query.data},
        update,
        context,
        "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–µ–∫–ª–∏—Å—Ç—É",
    )


async def feedbackRequest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await update.callback_query.message.edit_reply_markup(None)
    payload = {
        "EmployeeName": "Test",
        "Date": datetime.datetime.now(pytz.timezone("Europe/Moscow")).isoformat(),
        "Content": str(query.data),
        "EmployeeId": str(update.effective_chat.id),
        "Type": "–ê–†–ë–ò–°_–†–∞–±–æ—Ç–∞–°–æ–°—Ç–∞–∂–µ—Ä–∞–º–∏",
    }
    await fetch_json_post(
        f"{BASE_URL}/feedback", payload, update, context, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç!"
    )


async def help_keyboard():
    keyboard = [
        [InlineKeyboardButton("üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="SEND:/birthday")],
        [
            InlineKeyboardButton(
                "üìÑ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="SEND:/personnel"
            )
        ],
        [
            InlineKeyboardButton(
                "üßæ –†–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç", callback_data="SEND:/billingStatement"
            )
        ],
        [
            InlineKeyboardButton(
                "üèñ –û—Å—Ç–∞—Ç–∫–∏ –æ—Ç–ø—É—Å–∫–æ–≤", callback_data="SEND:/vacationLeftovers"
            )
        ],
        [
            InlineKeyboardButton(
                "üì• –û—Ç–ø—É—Å–∫ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è", callback_data="SEND:/vacationWithoutPay"
            )
        ],
        [
            InlineKeyboardButton(
                "üìä –°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ", callback_data="SEND:/taxCertificate"
            )
        ],
        [InlineKeyboardButton("üìÇ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞", callback_data="SEND:/file –§–∞–π–ª–§–ê–ö")],
        [InlineKeyboardButton("‚úÖ –ß–µ–∫–ª–∏—Å—Ç", callback_data="SEND:/checklist")],
    ]
    return InlineKeyboardMarkup(keyboard)


async def command_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.edit_reply_markup(None)
    command_line = query.data[5:]
    command = command_line.lstrip("/").split()[0]
    commands = {
        "birthday": birthday,
        "personnel": personnelData,
        "billingStatement": billingStatement,
        "vacationLeftovers": vacationLeftovers,
        "vacationWithoutPay": vacationWithoutPay,
        "taxCertificate": taxCertificate,
        "file": getFile,
        "checklist": checklist,
    }
    func = commands.get(command)

    if func:
        context.args = command_line.lstrip("/").split()[1:]
        await func(update, context)
        try:
            await query.message.delete()
        except Exception:
            pass
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
